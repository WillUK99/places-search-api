/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as HotelsIdImport } from './routes/hotels/$id'
import { Route as CountriesIdImport } from './routes/countries/$id'
import { Route as CitiesIdImport } from './routes/cities/$id'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const HotelsIdRoute = HotelsIdImport.update({
  id: '/hotels/$id',
  path: '/hotels/$id',
  getParentRoute: () => rootRoute,
} as any)

const CountriesIdRoute = CountriesIdImport.update({
  id: '/countries/$id',
  path: '/countries/$id',
  getParentRoute: () => rootRoute,
} as any)

const CitiesIdRoute = CitiesIdImport.update({
  id: '/cities/$id',
  path: '/cities/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/cities/$id': {
      id: '/cities/$id'
      path: '/cities/$id'
      fullPath: '/cities/$id'
      preLoaderRoute: typeof CitiesIdImport
      parentRoute: typeof rootRoute
    }
    '/countries/$id': {
      id: '/countries/$id'
      path: '/countries/$id'
      fullPath: '/countries/$id'
      preLoaderRoute: typeof CountriesIdImport
      parentRoute: typeof rootRoute
    }
    '/hotels/$id': {
      id: '/hotels/$id'
      path: '/hotels/$id'
      fullPath: '/hotels/$id'
      preLoaderRoute: typeof HotelsIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/cities/$id': typeof CitiesIdRoute
  '/countries/$id': typeof CountriesIdRoute
  '/hotels/$id': typeof HotelsIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/cities/$id': typeof CitiesIdRoute
  '/countries/$id': typeof CountriesIdRoute
  '/hotels/$id': typeof HotelsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/cities/$id': typeof CitiesIdRoute
  '/countries/$id': typeof CountriesIdRoute
  '/hotels/$id': typeof HotelsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/cities/$id' | '/countries/$id' | '/hotels/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cities/$id' | '/countries/$id' | '/hotels/$id'
  id: '__root__' | '/' | '/cities/$id' | '/countries/$id' | '/hotels/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CitiesIdRoute: typeof CitiesIdRoute
  CountriesIdRoute: typeof CountriesIdRoute
  HotelsIdRoute: typeof HotelsIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CitiesIdRoute: CitiesIdRoute,
  CountriesIdRoute: CountriesIdRoute,
  HotelsIdRoute: HotelsIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cities/$id",
        "/countries/$id",
        "/hotels/$id"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/cities/$id": {
      "filePath": "cities/$id.tsx"
    },
    "/countries/$id": {
      "filePath": "countries/$id.tsx"
    },
    "/hotels/$id": {
      "filePath": "hotels/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
